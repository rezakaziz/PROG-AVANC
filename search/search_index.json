{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83e\udde9 DEV5 \u2013 Programmation avanc\u00e9e","text":"<p>Ce module approfondit les concepts avanc\u00e9s de la programmation orient\u00e9e objet en Java. Il aborde la m\u00e9taprogrammation, la g\u00e9n\u00e9ricit\u00e9, la conception orient\u00e9e objet, les design patterns et l\u2019injection de d\u00e9pendances, afin de concevoir des applications robustes, extensibles et maintenables.</p>"},{"location":"#planning-des-cours-et-tp","title":"\ud83d\udcc5 Planning des cours et TP","text":"S\u00e9ance Cours TP 01 Introspection et annotations Afficheur / Label 02 G\u00e9n\u00e9ricit\u00e9 : types param\u00e9tr\u00e9s et bornes MaListe 03 Conception orient\u00e9e objet (principes SOLID, refactoring) Logger 04 Design Patterns (introduction) : D\u00e9corateur, Composite S\u00e9quence / Composite 05 Patterns de cr\u00e9ation ; Template Method Builder / Template Method 06 TP d\u00e9di\u00e9 : Application de Template Method Impl\u00e9mentation compl\u00e8te 07 Pattern Visiteur et \u00e9valuation d\u2019expressions \u00c9valuation d\u2019expressions 08 Inversion de d\u00e9pendances et injection \u00c9tude de cas 09 \u00c9valuation finale \u2014"},{"location":"cours/","title":"\ud83d\udcd8 Cours","text":"<p>Cette section regroupe l\u2019ensemble des s\u00e9ances de cours et de travaux pratiques. Chaque lien renverra vers la page correspondante lorsque les contenus seront ajout\u00e9s.</p> S\u00e9ance Cours Description 01 Introspection et annotations D\u00e9couverte de la m\u00e9taprogrammation en Java : comment  explorer et manipuler du code via l\u2019introspection et les annotations. 02 G\u00e9n\u00e9ricit\u00e9 D\u00e9couverte de la g\u00e9n\u00e9ricit\u00e9 en Java, le principe de substitution de Liskov, covariance et contravariance 03 La Conception Objet Comprendre comment concevoir des architectures orient\u00e9es objet robustes et \u00e9volutives"},{"location":"tp/tp01/tp01/","title":"M\u00e9taprogrammation en Java","text":"<p>\u2b07\ufe0f T\u00e9l\u00e9charger le TP (tp01.zip)</p> <p>Remarque pr\u00e9liminaire</p> <p>Le but de ce TP n'est pas de vous inciter \u00e0 utiliser des m\u00e9canismes d'introspection Java dans tous vos bouts de code. Vous devez d'abord penser \u00e0 la lisibilit\u00e9 du code.  </p> <p>L'id\u00e9e est de vous faire manipuler un certain nombre de m\u00e9canismes mis en \u0153uvre dans des frameworks comme Spring, afin de comprendre leur fonctionnement interne. </p> <p>En pratique, dans la plupart des cas, les m\u00e9canismes \u00e9tudi\u00e9s ici seront utilis\u00e9s \u00e0 travers des biblioth\u00e8ques d\u00e9j\u00e0 \u00e9crites.</p>"},{"location":"tp/tp01/tp01/#exercice-1","title":"Exercice 1","text":"<p>On veut pouvoir manipuler plus ou moins des objets dont on ne conna\u00eetrait pas la classe \u00e0 l'avance. Pensez \u00e0 des objets qui seraient d\u00e9crits par un fichier texte, ou des objets tir\u00e9s d'une base de donn\u00e9es.</p> <p>Question 1</p> <p>\u00c9tudiez la fonction <code>Afficheur.afficher</code>.</p> <p>Profitez-en pour regarder la classe <code>IntrospectionHelper</code>, elle contient des m\u00e9thodes qui vous seront utiles.</p> <p>Question 2</p> <p>On veut pouvoir cr\u00e9er et initialiser des classes arbitraires (encore une fois, parce que la description des objets viendra par exemple de bases de donn\u00e9es ou de fichiers textes).</p> <p>Dans un premier temps, on suppose que la classe a un constructeur par d\u00e9faut. Compl\u00e9tez la m\u00e9thode <code>creer</code> de la classe <code>Createur</code>. Pour bien comprendre ce qu'elle fait, vous pouvez regarder le test correspondant :</p> <pre><code>    Createur&lt;Adresse&gt; createur = new Createur&lt;&gt;(Adresse.class);\n    Adresse a = createur.creer();\n    assertNotNull(a);\n</code></pre> <p>Question 3</p> <p>On veut pouvoir initialiser maintenant des champs textes de notre objet. Pour cela, compl\u00e9tez la m\u00e9thode <code>setProprieteTexte</code> de la classe <code>Createur</code>.</p> <p>Question 4</p> <p>On veut enfin avoir un peu plus de souplesse : on passe non seulement un couple nom et valeur, mais aussi la classe de la valeur en question (qu'on aura normalement r\u00e9cup\u00e9r\u00e9e aussi par introspection, mais on va s'arr\u00eater l\u00e0).</p> <p>Compl\u00e9tez la m\u00e9thode <code>setChamp</code> de la classe <code>Createur</code>.</p>"},{"location":"tp/tp01/tp01/#exercice-2","title":"Exercice 2","text":"<p>On a cr\u00e9\u00e9 une annotation nomm\u00e9e \"Label\", que l'on peut mettre sur une m\u00e9thode (en fait, sur un getter).</p> <p>Question</p> <p>Compl\u00e9tez la classe <code>Afficheur2</code>, qui fait en gros la m\u00eame chose que <code>Afficheur</code>, mais qui utilise, dans l'affichage, le label li\u00e9 au getter au lieu du nom de la propri\u00e9t\u00e9.</p> <p>Par exemple, avec la configuration actuelle, le test suivant :</p> <pre><code>Personne2 p = new Personne2(\"Alfred\", 1999);\nString expected = \"annee de naissance : 1999 ; nom : Alfred\";\nString actual = new Afficheur2().afficher(p);\nassertEquals(expected, actual);        \n</code></pre> <p>devrait r\u00e9ussir. Le nom dans la classe <code>Personne2</code> n'est pas annot\u00e9 et sera affich\u00e9 en utilisant le nom de propri\u00e9t\u00e9 comme dans le premier exercice. En revanche, le getter d'anneeDeNaissance est annot\u00e9, et la valeur du label devrait \u00eatre utilis\u00e9e.</p> <p>Info</p> <p>Les annotations de ce type sont extr\u00eamement utilis\u00e9es dans les frameworks java professionnels, comme par exemple  Spring, J2EE, Lombok ou Android.</p>"},{"location":"tp/tp01/tp01/#exercice-3-prochaine-seance","title":"Exercice 3 (Prochaine S\u00e9ance)","text":"<p>Cet exercice est hors programme. Je l'ai laiss\u00e9 pour celles et ceux qui voudraient comprendre comment la classe Proxy est utilis\u00e9e.</p> <p>Note</p> <p>Pour cr\u00e9er un site web avec le rapport de test, utiliser la commande en ligne :</p> <pre><code>mvn surefire-report:report\n</code></pre>"},{"location":"tp/tp02/tp02/","title":"TP : G\u00e9n\u00e9ricit\u00e9 en Java","text":"<p>\u2b07\ufe0f T\u00e9l\u00e9charger le TP (tp02.zip)</p> <p>Objectif du TP</p> <p>L\u2019objectif de ce TP est de vous familiariser avec la g\u00e9n\u00e9ricit\u00e9 en Java : - cr\u00e9ation de classes g\u00e9n\u00e9riques, - utilisation des bornes de type, - conception de m\u00e9thodes g\u00e9n\u00e9riques, - et compr\u00e9hension des wildcards (<code>? extends</code>, <code>? super</code>).</p> <p>Ces notions sont \u00e0 la base de la programmation moderne en Java, notamment dans les collections et les frameworks comme Spring ou Hibernate.</p>"},{"location":"tp/tp02/tp02/#exercice-1-classes-generiques","title":"Exercice 1 : Classes g\u00e9n\u00e9riques","text":"<p>Info</p> <p>Le code attendu est test\u00e9 automatiquement via des classes de test. Vous pouvez lancer les tests directement \u2014 certains \u00e9choueront ou ne compileront pas tant que votre code n\u2019est pas complet.</p> <p>Si n\u00e9cessaire, commentez temporairement les parties de test non encore impl\u00e9ment\u00e9es.</p> <p>Question 1</p> <p>On veut cr\u00e9er une classe g\u00e9n\u00e9rique <code>MaListe&lt;T&gt;</code>.</p> <p>Elle doit poss\u00e9der les m\u00e9thodes suivantes (dont les signatures exactes sont \u00e0 d\u00e9terminer) :</p> <ul> <li><code>ajouter</code> : ajoute un \u00e9l\u00e9ment en fin de liste  </li> <li><code>taille</code> : retourne la taille actuelle de la liste  </li> <li><code>element</code> : retourne l\u2019\u00e9l\u00e9ment \u00e0 l\u2019indice <code>i</code> </li> </ul> <p>Votre impl\u00e9mentation doit permettre d\u2019ex\u00e9cuter le code suivant et que les autres tests de la classe <code>TestQ1</code> passent aussi :</p> <pre><code>    MaListe&lt;String&gt; liste1 = new MaListe&lt;&gt;();\n    liste1.ajouter(\"un\");\n    liste1.ajouter(\"deux\");             \n    assertEquals(\"un deux\", liste1.toString());\n</code></pre> <p>\ud83d\udc49 Vous pouvez utiliser un tableau d\u2019Object en interne, et le convertir au bon type au moment de la lecture.</p> <p>\ud83e\udde9 N\u2019oubliez pas d\u2019\u00e9crire une m\u00e9thode <code>toString()</code> pour que le test passe correctement.</p> <p>Question 2</p> <p>On ajoute maintenant une m\u00e9thode suppl\u00e9mentaire \u00e0 <code>MaListe</code> :</p> <ul> <li><code>ajouterListe</code> : ajoute tous les \u00e9l\u00e9ments d\u2019une autre liste du m\u00eame type.</li> </ul> <p>Le code suivant doit fonctionner :</p> <pre><code>MaListe&lt;Integer&gt; liste1 = new MaListe&lt;&gt;();\nMaListe&lt;Integer&gt; liste2 = new MaListe&lt;&gt;();\nliste1.ajouter(1);\nliste1.ajouter(2);\nliste2.ajouter(3);\nliste1.ajouterListe(liste2);\nassertEquals(\"1 2 3\", liste1.toString());\n</code></pre> <p>\ud83d\udca1 V\u00e9rifiez \u00e9galement les autres tests de la classe <code>TestQ2</code>.</p> <p>Question 3</p> <p>On se demande si le code suivant est raisonnable :</p> <pre><code>MaListe&lt;String&gt; liste1 = new MaListe&lt;&gt;();\nliste1.ajouter(\"un\");\nliste1.ajouter(\"deux\");\nMaListe&lt;Object&gt; liste2 = new MaListe&lt;&gt;();\nliste2.ajouter(Integer.valueOf(3));\n\nliste2.ajouterListe(liste1);\nassertEquals(\"3 un deux\", liste2.toString());\n</code></pre> <p>\ud83e\udde0 R\u00e9fl\u00e9chissez : ce code a-t-il du sens ? S\u2019il ne compile pas, modifiez la signature de vos m\u00e9thodes pour qu\u2019il fonctionne sans casser les tests pr\u00e9c\u00e9dents.</p> <p>\ud83d\udc49 Indice : les wildcards (<code>? extends</code> et <code>? super</code>) sont vos amies ici.</p> <p>V\u00e9rifiez avec les tests de <code>TestQ3</code>.</p> <p>Question 4</p> <p>On veut maintenant l\u2019op\u00e9ration inverse : une m\u00e9thode <code>ajouterDansListe</code>, qui ajoute tous les \u00e9l\u00e9ments de la liste courante \u00e0 une autre liste pass\u00e9e en argument.</p> <pre><code>MaListe&lt;String&gt; liste1 = new MaListe&lt;&gt;();\nliste1.ajouter(\"un\");\nliste1.ajouter(\"deux\");\nMaListe&lt;Object&gt; liste2 = new MaListe&lt;&gt;();\nliste2.ajouter(Integer.valueOf(3)); \n\nliste1.ajouterDansListe(liste2);\nassertEquals(\"3 un deux\", liste2.toString());\n</code></pre> <p>\ud83e\udde9 Faites tourner les tests de <code>TestQ4</code> pour v\u00e9rifier votre impl\u00e9mentation.</p>"},{"location":"tp/tp02/tp02/#exercice-2-methodes-generiques","title":"Exercice 2 : M\u00e9thodes g\u00e9n\u00e9riques","text":"<p>On va maintenant travailler sur des m\u00e9thodes g\u00e9n\u00e9riques. Ces m\u00e9thodes peuvent \u00eatre statiques et d\u00e9finies en dehors de la classe <code>MaListe</code>.</p> <p>Question 1</p> <p>On vous demande d\u2019abord d\u2019\u00e9crire la m\u00e9thode <code>MaListeHelper.concat</code> dans la classe <code>MaListeHelper</code>, de sorte que le code suivant compile et fonctionne :</p> <pre><code>MaListe&lt;String&gt; l1 = new MaListe&lt;&gt;();\nl1.ajouter(\"a\");\nMaListe&lt;String&gt; l2 = new MaListe&lt;&gt;();\nl2.ajouter(\"b\");\nMaListe&lt;String&gt; l3 = MaListeHelper.concat(l1, l2);\nassertEquals(\"a b\", l3.toString());\n</code></pre> <p>\ud83d\udcce Les tests correspondants se trouvent dans <code>TestQ4</code>.</p> <p>Question 2</p> <p>On veut pouvoir concat\u00e9ner deux listes de types diff\u00e9rents, \u00e0 condition qu\u2019ils partagent un m\u00eame super-type.</p> <pre><code>MaListe&lt;Integer&gt; l1 = new MaListe&lt;&gt;();\nl1.ajouter(4);\nMaListe&lt;String&gt; l2 = new MaListe&lt;&gt;();\nl2.ajouter(\"b\");\nMaListe&lt;Object&gt; l3 = MaListeHelper.concat(l1, l2);\nassertEquals(\"4 b\", l3.toString());\n</code></pre> <p>Ici, les types de base de <code>l1</code> et <code>l2</code> sont <code>Integer</code> et <code>String</code>. Leur sur-type commun est <code>Object</code>.</p> <p>\ud83d\udd27 Modifiez la m\u00e9thode <code>concat</code> pour que ce test et <code>TestQ5</code> fonctionnent.</p>"},{"location":"tp/tp03/tp03/","title":"TP 03 : Rappels de conception objet","text":"<p>\u2b07\ufe0f T\u00e9l\u00e9charger le TP (tp03.zip)</p> <p>Objectif du TP</p> <p>L\u2019objectif de ce TP est de consolider vos connaissances en programmation orient\u00e9e objet : - r\u00e9duction du couplage entre classes, - respect de la loi de D\u00e9m\u00e9ter, - et mise en pratique de principes de bonne conception logicielle (interfaces, d\u00e9pendances invers\u00e9es, r\u00e9utilisabilit\u00e9).</p> <p>Note</p> <p>Avant de commencer ce TP, vous devez :</p> <ol> <li>Cr\u00e9er un nouveau d\u00e9p\u00f4t GitHub nomm\u00e9 <code>tp03-conception-objet</code>.  </li> <li>Ajouter le compte @rezakaziz comme collaborateur du projet.  </li> <li>Allez dans <code>Settings</code> \u2192 <code>Collaborators</code> \u2192 <code>Add people</code> \u2192 recherchez <code>rezakaziz</code>.</li> <li>Clonez votre d\u00e9p\u00f4t en local et travaillez dessus pour les exercices suivants.  </li> <li>Commitez et poussez r\u00e9guli\u00e8rement vos modifications (<code>git add .</code>, <code>git commit -m \"progression\"</code>, <code>git push</code>).</li> </ol>"},{"location":"tp/tp03/tp03/#exercice-1-suppression-du-couplage","title":"Exercice 1 : Suppression du couplage","text":"<p>Question 1 \u2014 R\u00e9duire le couplage avec un logger</p> <p>Un logiciel de calcul enregistre (ou logge) ses \u00e9tapes pour permettre une v\u00e9rification ult\u00e9rieure. L\u2019impl\u00e9mentation actuelle se trouve dans le package <code>exo1q1v1</code>.</p> <p>Cependant, la classe <code>FileLogger</code> utilis\u00e9e rend les tests unitaires difficiles \u00e0 \u00e9crire et \u00e0 maintenir.</p> <p>\ud83d\udcad Analyse du probl\u00e8me</p> <ul> <li>Les exceptions lanc\u00e9es par le logger sont-elles bien g\u00e9r\u00e9es dans le code actuel ?  </li> <li>Pourquoi cette approche rend-elle le logiciel moins flexible ?</li> </ul> <p>\ud83d\udca1 Travail demand\u00e9</p> <ol> <li>Dans le package <code>exo1q1v2</code>, cr\u00e9ez une interface pour r\u00e9duire le couplage.</li> <li>Fournissez trois impl\u00e9mentations :<ul> <li><code>NullLogger</code> : ne fait rien (utile pour d\u00e9sactiver les logs)  </li> <li><code>MemoryLogger</code> : stocke les messages dans une <code>ArrayList&lt;String&gt;</code> (utile pour les tests)  </li> <li><code>FileLogger</code> : reprend le comportement initial (\u00e9criture dans un fichier)</li> </ul> </li> <li>Modifiez le code du calcul pour qu\u2019il d\u00e9pende de l\u2019interface et non plus d\u2019une classe concr\u00e8te.</li> <li>R\u00e9fl\u00e9chissez : qui doit instancier le logger et pourquoi ?  </li> </ol> <p>Question 2 \u2014 Exportation flexible du catalogue</p> <p>On dispose d\u2019une classe <code>Catalogue</code> repr\u00e9sentant un ensemble de produits. Dans le package <code>exo1q2v1</code>, cette classe peut exporter son contenu au format XML via une classe <code>XMLDumper</code>.</p> <p>Cependant, le couplage entre <code>Catalogue</code> et <code>XMLDumper</code> est trop fort : la classe <code>Catalogue</code> ne devrait pas d\u00e9pendre d\u2019un format sp\u00e9cifique.</p> <p>\ud83d\udcad Probl\u00e8me \u00e0 r\u00e9soudre</p> <ul> <li>Pourquoi le fait que <code>Catalogue</code> appelle directement <code>XMLDumper</code> pose-t-il probl\u00e8me ?  </li> <li>Comment rendre cette architecture extensible pour d\u2019autres formats (JSON, YAML, etc.) ?</li> </ul> <p>\ud83d\udca1 Travail demand\u00e9</p> <ol> <li>Concevez une abstraction qui s\u00e9pare la logique m\u00e9tier (<code>Catalogue</code>) du format d\u2019exportation.  </li> <li>Impl\u00e9mentez au moins deux exporteurs :<ul> <li><code>XMLDumper</code> : exporte en XML (impl\u00e9mentation existante adapt\u00e9e \u00e0 la nouvelle interface)</li> <li><code>JSONDumper</code> : exporte en JSON</li> </ul> </li> <li>(Optionnel, si vous avez le temps) : ajoutez un <code>YAMLExporter</code>    \u2192 Pensez \u00e0 g\u00e9rer la profondeur d\u2019\u00e9criture avec une variable d\u2019instance.</li> <li>Testez votre architecture en v\u00e9rifiant qu\u2019un changement de format ne n\u00e9cessite aucune modification du code de <code>Catalogue</code>.</li> </ol> <p>\ud83d\udcd8 Exemple attendu pour le JSON (indentation facultative) :</p> <pre><code>{\"@type\":\"catalogue\", \n    \"contenu\":[\n        {\"@type\":\"produit\",\n             \"contenu\":[\n                    {\"@type\":\"designation\", \"contenu\":[\"texte\":\"souris\"]},\n                    {\"@type\":\"prix\", \"contenu\":[\"texte\":\"30.0\"]}\n                    ]\n        },\n        {\"@type\":\"produit\",\n             \"contenu\":[\n                    {\"@type\":\"designation\", \"contenu\":[\"texte\":\"ordi\"]},\n                    {\"@type\":\"prix\", \"contenu\":[\"texte\":\"600.0\"]}\n                    ]\n        }\n    ]\n}\n</code></pre>"},{"location":"tp/tp03/tp03/#exercice-2-loi-de-demeter","title":"Exercice 2 : Loi de D\u00e9m\u00e9ter","text":"<p>Question 1 \u2014 Comprendre et appliquer la loi de D\u00e9m\u00e9ter</p> <p>On dispose de l\u2019architecture suivante repr\u00e9sentant une entreprise :</p> <p></p> PlantUML <pre><code>@startuml\nskin rose\nclass Employ\u00e9 {\n    nom\n}\nEntreprise o- D\u00e9partement\nD\u00e9partement o- Service\nService o-- Equipe\nEquipe o--- Employ\u00e9\nEquipe --&gt; Employ\u00e9 : directeur\n@enduml\n</code></pre> <p>Une m\u00e9thode du programme vise \u00e0 retourner la liste des noms des directeurs d\u2019\u00e9quipe.</p> <p>\ud83d\udcad Questions de r\u00e9flexion</p> <ul> <li>Cette m\u00e9thode respecte-t-elle la loi de D\u00e9m\u00e9ter ? </li> <li>Quels sont les sympt\u00f4mes d\u2019une violation de cette loi dans le code actuel ?</li> <li>Que se passerait-il si la hi\u00e9rarchie de classes changeait (ajout d\u2019un niveau, renommage, etc.) ?</li> </ul> <p>\ud83d\udca1 Travail demand\u00e9</p> <ul> <li>Refactorez la m\u00e9thode de mani\u00e8re \u00e0 respecter la loi de D\u00e9m\u00e9ter.  </li> <li>Testez que la m\u00e9thode fonctionne toujours apr\u00e8s la modification.</li> </ul> <p>Question 2 \u2014 G\u00e9n\u00e9raliser la notion de direction</p> <p>On d\u00e9couvre ensuite que toutes les entit\u00e9s (Entreprise, D\u00e9partement, Service, \u00c9quipe) peuvent avoir un directeur.</p> <p>Le mod\u00e8le devient alors :</p> <p></p> PlantUML <pre><code>@startuml\nskin rose\nInterface AvecDirecteur\nAvecDirecteur -&gt; Employ\u00e9 : directeur\nclass Employ\u00e9 {\n    nom\n}\nEntreprise o- D\u00e9partement\nD\u00e9partement o- Service\nService o- Equipe\n\nEntreprise --|&gt; AvecDirecteur\nD\u00e9partement --|&gt; AvecDirecteur\nService --|&gt; AvecDirecteur\nEquipe --|&gt; AvecDirecteur\n@enduml\n</code></pre> <p>\ud83d\udcad R\u00e9flexion</p> <ul> <li>Comment adapter votre solution pr\u00e9c\u00e9dente pour qu\u2019elle fonctionne avec cette nouvelle hi\u00e9rarchie ?  </li> <li>Votre code reste-t-il conforme \u00e0 la loi de D\u00e9m\u00e9ter ?</li> <li>Faut-il introduire une abstraction (interface, m\u00e9thode commune, ou visiteur) pour traiter toutes ces entit\u00e9s de mani\u00e8re uniforme ?</li> </ul> <p>\ud83d\udca1 Travail demand\u00e9</p> <ul> <li>Refactorez votre code pour int\u00e9grer la notion d\u2019<code>AvecDirecteur</code>.</li> </ul>"},{"location":"tp/tp03/tp03/#exercice-3-solid-et-refactorisation","title":"Exercice 3 : SOLID et refactorisation","text":"<p>Question 1 \u2014 Identifier les violations des principes SOLID</p> <p>\ud83d\udcad Travail d\u2019analyse</p> <ul> <li>Parcourez votre code des exercices pr\u00e9c\u00e9dents.  </li> <li>Pour chaque principe SOLID (SRP, OCP, LSP, ISP, DIP), identifiez :<ul> <li>un endroit o\u00f9 le principe est respect\u00e9 ;</li> <li>un endroit o\u00f9 il est viol\u00e9 (m\u00eame l\u00e9g\u00e8rement).  </li> </ul> </li> <li>Justifiez vos r\u00e9ponses.</li> </ul> <p>\ud83d\udca1 Extension possible</p> <ul> <li>Proposez des refactorisation pour corriger les violation identifi\u00e9e.  </li> </ul> <p>Remarque</p> <p>Pour cr\u00e9er un site web avec le rapport de test, utilisez la commande Maven suivante :</p> <pre><code>mvn surefire-report:report\n</code></pre>"}]}